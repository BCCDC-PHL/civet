```python, name="header",echo=False, results='raw'
import os
figdir = "" ##CHANGE
sequencing_centre = "" ##CHANGE

if sequencing_centre != "":
    header_file = os.path.join(figdir, sequencing_centre)
    print(f"![]({header_file})")

    sequencing_centre = sequencing_centre.split(".")[0]

    print("## Cluster investigation for sequences generated by " + sequencing_centre)

else:
    header_file = os.path.join(figdir, "DEFAULT.png")
    print(f"![]({header_file})")

    print("## Cluster investigation")
```

```python, name="import dependencies", echo=False
import matplotlib.pyplot as pyplot
import pandas as pd 
import os
import data_parsing as dp
import make_tree_figures as tree_viz
import mapping as mapping
import matplotlib.font_manager as font_manager
import matplotlib as mpl
from collections import defaultdict
import tabulate
import datetime as dt
import csv
import numpy as np
import scipy as sp

import warnings
warnings.filterwarnings("ignore")

from dateutil.relativedelta import relativedelta, FR

filtered_cog_metadata = "" ##CHANGE
input_csv = "" ##CHANGE
full_metadata_file = "" ##CHANGE
desired_fields = "" ##CHANGE

tree_dir = "" ##CHANGE

QC_fail_file = "" ##CHANGE
missing_seq_file = "" ##CHANGE

input_directory = "" ##CHANGE

output_directory = "" ##CHANGE
name_stem_input = "" ##CHANGE

add_boxplots = "" ##CHANGE

if "/" in name_stem_input:
    name_stem = name_stem_input.split("/")[-1]
else:
    name_stem = name_stem_input

desired_fields_input = "" ##CHANGE
label_fields_input = "" ##CHANGE
graphic_dict_input = "" ##CHANGE
summary_dir = "" ##CHANGE
node_summary_option = "" ##CHANGE

tree_name_stem = "" ##CHANGE

desired_fields = []
options = desired_fields_input.split(",")
for i in options: 
    desired_fields.append(i)

graphic_dict = {}
splits = graphic_dict_input.split(",")
for element in splits:
    key = element.split(":")[0]
    value = element.split(":")[1]
    graphic_dict[key] = value
    if key not in desired_fields:
        desired_fields.append(key)

label_fields= []
if label_fields_input != "NONE":
    options = label_fields_input.split(",")
    for i in options: 
        label_fields.append(i)



snp_report = "" ##CHANGE

local_lineages = "" ##CHANGE
local_lin_maps = "" ##CHANGE
local_lin_tables = "" ##CHANGE

map_sequences = "" ##CHANGE #going to be true or false
x_col = "" ##CHANGE
y_col = "" ##CHANGE
mapping_trait = "" ##CHANGE
input_crs = "" ##CHANGE
uk_map = "" ##CHANGE
channels_map = "" ##CHANGE
ni_map = "" ##CHANGE
urban_centres = "" ##CHANGE


mapping_json_files = [uk_map, channels_map, ni_map]


#font_list = font_manager.fontManager.addfont(font_file)
font_props = font_manager.FontProperties(family=["sans-serif"])
#font_props = font_manager.FontProperties(family=["helveticaneue","helvetica","definitelynotarial",'sans-serif'])

a = matplotlib.font_manager.FontManager()
a.findfont(font_props, fallback_to_default=True)

pyplot.rcParams.update({'figure.max_open_warning': 0})

#mpl.rcParams['font.family'] = 'helveticaneue'
mpl.rcParams['font.weight']=50
mpl.rcParams['axes.labelweight']=50

```



```python, name="parse metadata", echo=False, results='raw'

present_in_tree, tip_to_tree = dp.parse_tree_tips(tree_dir)

query_dict, query_id_dict, present_lins, tree_to_tip = dp.parse_filtered_metadata(filtered_cog_metadata, tip_to_tree) #Just the lines with their queries plus the closest match in COG

if input_csv != '':
    adm2_to_adm1 = dp.prepping_adm2_adm1_data(full_metadata_file)
    query_dict = dp.parse_input_csv(input_csv, query_id_dict, desired_fields, label_fields, adm2_to_adm1, False) #Any query information they have provided

full_tax_dict = dp.parse_full_metadata(query_dict, full_metadata_file, present_lins, present_in_tree, node_summary_option)
```

```python, name="QC fails", echo=False, results="raw"
count_fails = 0

if QC_fail_file != "": 
    with open(QC_fail_file) as f:
        next(f)
        for l in f:
            count_fails += 1

if count_fails != 0:
    fail_dict = dp.investigate_QC_fails(QC_fail_file)
    if len(fail_dict) > 0:
        print("The following sequences have failed QC:\n")
        for seq, reason in fail_dict.items():
            pretty_name = seq.replace("'","")
            pretty_reason = reason.replace("'","")
            print(" - " + pretty_name, pretty_reason)
```

```python, name="early descriptions", echo=False, results='tex'
number_seqs = len(query_dict)

cog_number = 0
not_in_cog_number = 0
for tax in query_dict.values():
    if tax.in_cog:
        cog_number += 1
    else:
        not_in_cog_number += 1

print(str(number_seqs) + " queries (" + str(cog_number) + " matched to COG-UK database).")
print(str(not_in_cog_number) + " additional sequences provided.")

```


```python, name="first_table", echo=False, results="tex"

if cog_number != 0 and not_in_cog_number != 0:
    df_cog, df_seqs = dp.make_initial_table(query_dict, desired_fields, label_fields,False)
    print("> **Table 1**| Queries found in COG-UK database.\n")
    print(df_cog.to_markdown())
    print("\n")
    print("> **Table 2**| Queries matched to closest COG-UK sequence using input sequences\n")
    print(df_seqs.to_markdown())
elif cog_number == 0 and not_in_cog_number != 0:
    df_seqs = dp.make_initial_table(query_dict, desired_fields, label_fields,False)
    print("> **Table 1**| Queries matched to closest COG-UK sequence using input sequences\n")
    print(df_seqs.to_markdown())
elif not_in_cog_number == 0 and cog_number != 0:
    df_cog = dp.make_initial_table(query_dict, desired_fields, label_fields,False)
    print("> **Table 1**| Queries found in COG-UK database.\n")
    print(df_cog.to_markdown())
```

## Phylogenies

```python, name="make_trees", echo=False, include=False, figure=False
too_tall_trees, overall_tree_number, colour_dict_dict, overall_df_dict = tree_viz.make_all_of_the_trees(tree_dir, tree_name_stem, full_tax_dict, query_dict, desired_fields, label_fields, graphic_dict)
```
```python, name="make_legend", echo=False, include=False, results='tex'
for trait, colour_dict in colour_dict_dict.items():
    tree_viz.make_legend(colour_dict_dict)
    number_of_options = len(colour_dict)
    if number_of_options > 15:
        print("WARNING: There are more than 15 options to colour by for " + trait + ", which will make it difficult to see the differences between colours. Consider adding the trait to the taxon labels on the tree by using the flag _--label-fields_ when calling CIVET.")
```

```python, name="show_trees", echo=False, results='raw'
for i in range(1,overall_tree_number+1):
    tree_name = "Tree " + str(i)
    lookup = f"{tree_name_stem}_{i}"
    print(f"#### Tree {i}")
    if len(tree_to_tip[lookup]) == 1:
        print(f"1 sequence of interest")
    else:
        print(f"{len(tree_to_tip[lookup])} sequences of interest")
    print("   ")

    print(f"![]({figdir}/{name_stem}_make_trees_{(i*2)-1}.png)")
    print(f"![]({figdir}/{name_stem}_make_trees_{i*2}.png)")

    print(f'<img src="{figdir}/{name_stem}_make_legend_1.png" alt="drawing" style="width:100%;"/>')
    print("\n")


```

```python, name="Tree error checking", echo=False, results='raw'
if too_tall_trees != []:
    for tree in too_tall_trees:
        print("Tree" + str(tree) + " is too large to be rendered here.")
```




```python, name="tree_background", echo=False, include=False,  results='raw'
if add_boxplots != "":
    print("""### Tree background\n\nThe following plots describe the data in the collapsed nodes in more detail.\nIf more than one country was present, the bar chart describes the number of sequences present in each country. \nWhere there were 10 countries or more, the largest 10 have been taken. \nIf a UK sequence is present in the collapsed node, it is always shown in the plot.\n\n""")
    bar_count = tree_viz.describe_tree_background(full_tax_dict, tree_name_stem, tree_dir)

    for i in range(bar_count):
        print(f"![]({figdir}/{name_stem}_tree_background_{i+1}.png)")

```

### SNPs found in sequences of interest

```python, name="genome graph", echo=False, results='raw'
print(f"![]({figdir}/genome_graph.png)")
```

```python, name="map_sequences", echo=False, results='raw', include=False
if map_sequences != "False":
    print("## Plotting sequences")
    adm2_in_map, adm2_percentages = mapping.map_traits(input_csv, input_crs, mapping_trait, x_col, y_col, mapping_json_files, urban_centres)

    print("There are sequences from " + str(len(adm2_in_map)) + " admin2 regions")

    print("This is divided into:")
    for adm2, percentage in adm2_percentages.items():
        print(str(percentage) + "% (" + str(adm2_in_map[adm2]) + ") in " + adm2)

    if mapping_trait != "False":
        print("This is shown in the map below, and is coloured by " + mapping_trait + " and urban centres are shown in the darker grey")
    else:
        print("This is shown in the map below, with urban centres shown in the darker grey")
```
```python, name="show_map", echo=False, results='raw'
if map_sequences != "False":
    print("![](" + figdir + "/" + name_stem + "_map_sequences_1.png)")
```




```python, name='Regional-scale', echo=False, results='raw'
if local_lineages != '':
    print("## Regional-scale background UK lineage mapping")
    centralLoc = [ t for t in local_lin_tables.split(';') if "_central_" in t]
    centralName = centralLoc[0].split('/')[-1].split("_")[0]
    linmapList=[f'./{"/".join(p.split("/")[-2:])}' for p in local_lin_maps.split(';')]
    tableList=[t for t in local_lin_tables.split(';') if "_central_" not in t]

    print(f'Based on the sample density for submitted sequences with adm2 metadata, **{centralName}** was determined to be the focal NHS Health-board for region-scale UK-lineage analysis.')
    print('\n')
    print(f'The below figure visualises the relative proportion of assigned UK-Lineages for samples collected and sequenced within the central healthboard region for the defined time-frame.')
    print ("![]("+linmapList[0]+")")
    print('\n')
    print(f'The below figure visualises the relative proportions of assigned UK-Lineages for samples collected from the focal, and neighboring healthboard regions for the defined time-frame within the regional context. Plot-size demonstrates relative numbers of sequences across given NHS healthboards.')
    print ("![]("+linmapList[2]+")")
    print('\n')
    #print(f'The below figure visualises the relative proportion of assigned UK-Lineages for samples collected and sequenced within neighbouring healthboard regions for the defined time-frame.')
    #print ("![]("+linmapList[1]+")")
    #print('\n')
    print(f'Tabulated lineage data for the **central** health-board region:')
    with open(centralLoc[0]) as file:
        contents = file.read()
        print (contents)
    print(f'Tabulated lineage data for the **neighbouring** health-board regions:')

    for each in tableList:
        with open(each) as file:
            contents = file.read()
            print (contents)
```

## Appendix

This report summarises the information provided by whole genome sequencing of SARS-COV-2 generated by the COG consortium. 
It is intended to provide an additional layer of analysis for infection control efforts, and to aid in the investigation of outbreak clusters.

For each query sequence, CIVET either finds them in the COG database, or matches them as closely as possible to a sequence in the COG database, and puts them into a UK lineage.

Key points for interpreting this information:

 - This type of analysis is not able to infer direct transmission between two samples. Even identical sequences may be unrelated as SARS-COV2 is relatively slow evolving for an RNA virus. Previous analysis has shown that samples taken over 100 days apart can be identical. 
 - If sequences have different global or UK lineage designations, we can rule out close epidemiological linkage.
 - If sequences have different phylotypes it’s very unlikely that they are direct transmissions. 
 - If sequences share the same lineage and the same phylotype, transmission cannot be ruled out and also cannot be confirmed.


The figure below shows the distribution of time differences that two sequences can be sampled and still be identical. 
It is to illustrate that identical sequences does not confirm linked cases.

```python, name="Identity figure", results='raw', echo=False, fig=True, caption="Distribution of time between identical sequences"
print(f"![]({figdir}/polytomies.png)")
```


### Useful definitions

*Phylotype* 

Each lineage phylogeny is labelled with phylotypes that describe shared mutations in the tree. If two sequences have the same phylotype it means the share mutations. They may also have additional, unique mutations. So having the same phylotype doesn't mean the seqeunces are identical. If sequences have different phylotypes however it means they are present on distinct parts of the phylogenetic tree.

*UK lineage* 

UK lineages are an approximation to distinct introductions of SARS-CoV-2 to the UK based on the phylogenetic tree.

*Global lineage* 

Assigned using the pangolin software, these are phylogenetic lineages. More information can be found at https://github.com/hCoV-2019/lineages

### Software versions

This report was made using:

```python, name='software versions', echo=False, results='raw'

import platform


print("Python " + platform.python_version())

print("Matplotlib version " + matplotlib.__version__)
print("Pandas version " + pd.__version__)
print("Tabulate version " + tabulate.__version__)
print("CSV version " + csv.__version__)
print("Numpy version " + np.__version__)
print("Scipy version " + sp.__version__)
print("No version number for Baltic")

print("COG data is now submitted every day, so the background data was updated yesterday")

print("CIVET version is 0.1")
```

## Acknowledgements

This report was generated by CIVET.

The background data from the UK was generated by the COG consortium (https://www.cogconsortium.uk/), a national, multi-centre consortium for the sequencing and analysis of SARS-CoV-2 genomes for Public Health.

We also use some background data from GISAID (https://www.gisaid.org/) in the phylogenies. We thank everyone involved in the global sequencing effort for making their data available. 

Tree data was visualised using baltic (https://github.com/evogytis/baltic)

Mapping data was downloaded from the Global Administrative Database (https://gadm.org/) and Natural Earth (https://www.naturalearthdata.com/)

```python, name="footer", echo=False, results='raw'
print("![](" + figdir + "/footer.png)")
```
